// This file is generated by kxml_compiler from TS.xsd.
// All changes you do to this file will be lost.

#include "TS.h"

#include <QtDebug>
#include <QFile>
#include <QDomDocument>

Translation::Translation()
{
  mValueHadBeenSet = false;
  mElementIsOptional = false;
}

Translation::Translation( const QString &v )
{
  mValue = v;
  mValueHadBeenSet = true;
  mElementIsOptional = false;
}

void Translation::setValue( const QString &v )
{
  mValue = v;
  mValueHadBeenSet = true;
}

QString Translation::value() const
{
  return mValue;
}

bool Translation::valueHadBeenSet() const
{
  return mValueHadBeenSet;
}

void Translation::setElementIsOptional( const bool &v )
{
  mElementIsOptional = v;
}

bool Translation::elementIsOptional() const
{
  return mElementIsOptional;
}

Translation Translation::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "translation" ) {
    qCritical() << "Expected 'translation', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Translation();
  }

  Translation result = Translation();

  result.setValue( element.text() );

  if ( ok ) *ok = true;
  return result;
}


Source::Source()
{
  mValueHadBeenSet = false;
  mElementIsOptional = false;
}

Source::Source( const QString &v )
{
  mValue = v;
  mValueHadBeenSet = true;
  mElementIsOptional = false;
}

void Source::setValue( const QString &v )
{
  mValue = v;
  mValueHadBeenSet = true;
}

QString Source::value() const
{
  return mValue;
}

bool Source::valueHadBeenSet() const
{
  return mValueHadBeenSet;
}

void Source::setElementIsOptional( const bool &v )
{
  mElementIsOptional = v;
}

bool Source::elementIsOptional() const
{
  return mElementIsOptional;
}

Source Source::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "source" ) {
    qCritical() << "Expected 'source', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Source();
  }

  Source result = Source();

  result.setValue( element.text() );

  if ( ok ) *ok = true;
  return result;
}


Location::Location()
{
  mValueHadBeenSet = false;
  mElementIsOptional = false;
}

void Location::setFilename( const QString &v )
{
  mFilename = v;
}

QString Location::filename() const
{
  return mFilename;
}

void Location::setLine( const qint32 &v )
{
  mLine = v;
}

qint32 Location::line() const
{
  return mLine;
}

bool Location::valueHadBeenSet() const
{
  return mValueHadBeenSet;
}

void Location::setElementIsOptional( const bool &v )
{
  mElementIsOptional = v;
}

bool Location::elementIsOptional() const
{
  return mElementIsOptional;
}

Location Location::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "location" ) {
    qCritical() << "Expected 'location', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Location();
  }

  Location result = Location();

  result.setFilename( element.attribute( "filename" ) );
  result.setLine( element.attribute( "line" ).toInt() );

  if ( ok ) *ok = true;
  return result;
}


Message::Message()
{
  mValueHadBeenSet = false;
  mElementIsOptional = false;
}

void Message::addLocation( const Location &v )
{
  mLocationList.append( v );
}

void Message::setLocationList( const Location::List &v )
{
  mLocationList = v;
}

Location::List Message::locationList() const
{
  return mLocationList;
}

void Message::setSource( const Source &v )
{
  mSource = v;
}

Source Message::source() const
{
  return mSource;
}

void Message::setTranslation( const Translation &v )
{
  mTranslation = v;
}

Translation Message::translation() const
{
  return mTranslation;
}

bool Message::valueHadBeenSet() const
{
  return mValueHadBeenSet;
}

void Message::setElementIsOptional( const bool &v )
{
  mElementIsOptional = v;
}

bool Message::elementIsOptional() const
{
  return mElementIsOptional;
}

Message Message::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "message" ) {
    qCritical() << "Expected 'message', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Message();
  }

  Message result = Message();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "location" ) {
      bool ok;
      Location o = Location::parseElement( e, &ok );
      if ( ok ) result.addLocation( o );
    }
    else if ( e.tagName() == "source" ) {
      bool ok;
      Source o = Source::parseElement( e, &ok );
      if ( ok ) result.setSource( o );
    }
    else if ( e.tagName() == "translation" ) {
      bool ok;
      Translation o = Translation::parseElement( e, &ok );
      if ( ok ) result.setTranslation( o );
    }
  }


  if ( ok ) *ok = true;
  return result;
}


Name::Name()
{
  mValueHadBeenSet = false;
  mElementIsOptional = false;
}

Name::Name( const QString &v )
{
  mValue = v;
  mValueHadBeenSet = true;
  mElementIsOptional = false;
}

void Name::setValue( const QString &v )
{
  mValue = v;
  mValueHadBeenSet = true;
}

QString Name::value() const
{
  return mValue;
}

bool Name::valueHadBeenSet() const
{
  return mValueHadBeenSet;
}

void Name::setElementIsOptional( const bool &v )
{
  mElementIsOptional = v;
}

bool Name::elementIsOptional() const
{
  return mElementIsOptional;
}

Name Name::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "name" ) {
    qCritical() << "Expected 'name', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Name();
  }

  Name result = Name();

  result.setValue( element.text() );

  if ( ok ) *ok = true;
  return result;
}


Context::Context()
{
  mValueHadBeenSet = false;
  mElementIsOptional = false;
}

void Context::setName( const Name &v )
{
  mName = v;
}

Name Context::name() const
{
  return mName;
}

void Context::addMessage( const Message &v )
{
  mMessageList.append( v );
}

void Context::setMessageList( const Message::List &v )
{
  mMessageList = v;
}

Message::List Context::messageList() const
{
  return mMessageList;
}

bool Context::valueHadBeenSet() const
{
  return mValueHadBeenSet;
}

void Context::setElementIsOptional( const bool &v )
{
  mElementIsOptional = v;
}

bool Context::elementIsOptional() const
{
  return mElementIsOptional;
}

Context Context::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "context" ) {
    qCritical() << "Expected 'context', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Context();
  }

  Context result = Context();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "name" ) {
      bool ok;
      Name o = Name::parseElement( e, &ok );
      if ( ok ) result.setName( o );
    }
    else if ( e.tagName() == "message" ) {
      bool ok;
      Message o = Message::parseElement( e, &ok );
      if ( ok ) result.addMessage( o );
    }
  }


  if ( ok ) *ok = true;
  return result;
}


TS::TS()
{
  mValueHadBeenSet = false;
  mElementIsOptional = false;
}

void TS::setVersion( const double &v )
{
  mVersion = v;
}

double TS::version() const
{
  return mVersion;
}

void TS::setLanguage( const QString &v )
{
  mLanguage = v;
}

QString TS::language() const
{
  return mLanguage;
}

void TS::addContext( const Context &v )
{
  mContextList.append( v );
}

void TS::setContextList( const Context::List &v )
{
  mContextList = v;
}

Context::List TS::contextList() const
{
  return mContextList;
}

bool TS::valueHadBeenSet() const
{
  return mValueHadBeenSet;
}

void TS::setElementIsOptional( const bool &v )
{
  mElementIsOptional = v;
}

bool TS::elementIsOptional() const
{
  return mElementIsOptional;
}

TS TS::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "TS" ) {
    qCritical() << "Expected 'TS', got '" << element.tagName() << "'.";
    if ( ok ) *ok = false;
    return TS();
  }

  TS result = TS();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "context" ) {
      bool ok;
      Context o = Context::parseElement( e, &ok );
      if ( ok ) result.addContext( o );
    }
  }

  result.setVersion( element.attribute( "version" ).toDouble() );
  result.setLanguage( element.attribute( "language" ) );

  if ( ok ) *ok = true;
  return result;
}

TS TS::parseFile( const QString &filename, bool *ok )
{
  QFile file( filename );
  if ( !file.open( QIODevice::ReadOnly ) ) {
    qCritical() << "Unable to open file '" << filename << "'";
    if ( ok ) *ok = false;
    return TS();
  }

  QString errorMsg;
  int errorLine, errorCol;
  QDomDocument doc;
  if ( !doc.setContent( &file, false, &errorMsg, &errorLine, &errorCol ) ) {
    qCritical() << errorMsg << " at " << errorLine << "," << errorCol;
    if ( ok ) *ok = false;
    return TS();
  }

  bool documentOk;
  TS c = parseElement( doc.documentElement(), &documentOk );
  if ( ok ) {
    *ok = documentOk;
  }
  return c;
}

TS TS::parseString( const QString &xml, bool *ok )
{
  QString errorMsg;
  int errorLine, errorCol;
  QDomDocument doc;
  if ( !doc.setContent( xml, false, &errorMsg, &errorLine, &errorCol ) ) {
    qCritical() << errorMsg << " at " << errorLine << "," << errorCol;
    if ( ok ) *ok = false;
    return TS();
  }

  bool documentOk;
  TS c = parseElement( doc.documentElement(), &documentOk );
  if ( ok ) {
    *ok = documentOk;
  }
  return c;
}


